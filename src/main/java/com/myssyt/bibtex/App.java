package com.myssyt.bibtex;

import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class App extends javax.swing.JFrame {
    private final String filename = "default";
    private CardLayout cl;
    private ViiteManageri manageri;
    private DefaultTableModel model;
    ArticlePanel articlePanel;
    BookPanel bookPanel;
    InproceedingsPanel inproceedingsPanel;
    
    int selectedType;

    /**
     * Creates new form Main
     */
    public App() {
        initComponents();
        
        articlePanel = new ArticlePanel();
        bookPanel = new BookPanel();
        inproceedingsPanel = new InproceedingsPanel();
        
        contPanel.add(articlePanel, "article");
        contPanel.add(bookPanel, "book");
        contPanel.add(inproceedingsPanel, "inproceedings");
        cl = (CardLayout)(contPanel.getLayout());
        cl.show(contPanel, "article");
        
        manageri = new ViiteManageri();
        lMessage.setText(manageri.lataaViitteet(filename)); // nimikentt√§ tietokannalle
        model = (DefaultTableModel) refTable.getModel();
        
        for(Viite viite : manageri.getViitteet()) {
            if (viite.getClass().equals(Artikkeli.class)) {
                Artikkeli artikkeli = (Artikkeli) viite;
                // entrytype, author/editor, title, year, journal/booktitle, bibtexkey
                model.addRow(new Object[] {
                    "Article",
                    artikkeli.getAuthor(),
                    artikkeli.getTitle(),
                    artikkeli.getYear(),
                    artikkeli.getJournal(),
                    artikkeli.getBibtexKey()
                });
            } else if (viite.getClass().equals(Kirja.class)) {
                Kirja kirja = (Kirja) viite;
                // entrytype, author/editor, title, year, journal/booktitle, bibtexkey
                model.addRow(new Object[] {
                    "Book",
                    kirja.getAuthor(),
                    kirja.getTitle(),
                    kirja.getYear(),
                    "",
                    kirja.getBibtexKey()
                });
            } else if (viite.getClass().equals(Inproceedings.class)) {
                Inproceedings inproc = (Inproceedings) viite;
                // entrytype, author/editor, title, year, journal/booktitle, bibtexkey
                model.addRow(new Object[] {
                    "Inproceedings",
                    inproc.getAuthor(),
                    inproc.getTitle(),
                    inproc.getYear(),
                    inproc.getBooktitle(),
                    inproc.getBibtexKey()
                });
            } else {
                // ei tunnistettu luokka
            } 
            selectedType = 0;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        controlsPanel = new javax.swing.JPanel();
        bNew = new javax.swing.JButton();
        cbType = new javax.swing.JComboBox<>();
        bAdd = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        bExport = new javax.swing.JButton();
        bSave = new javax.swing.JButton();
        lMessage = new javax.swing.JLabel();
        contPanel = new javax.swing.JPanel();
        refTableScrollPane = new javax.swing.JScrollPane();
        refTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 600));

        bNew.setText("New");
        bNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewActionPerformed(evt);
            }
        });

        cbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Article", "Book", "InProceedings" }));
        cbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTypeActionPerformed(evt);
            }
        });

        bAdd.setText("Add");
        bAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddActionPerformed(evt);
            }
        });

        bDelete.setText("Delete");

        bExport.setText("Export");

        bSave.setText("Save File");

        lMessage.setText("Message:");

        javax.swing.GroupLayout controlsPanelLayout = new javax.swing.GroupLayout(controlsPanel);
        controlsPanel.setLayout(controlsPanelLayout);
        controlsPanelLayout.setHorizontalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addComponent(bNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bExport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSave)
                .addGap(0, 297, Short.MAX_VALUE))
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        controlsPanelLayout.setVerticalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bNew)
                    .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bAdd)
                    .addComponent(bDelete)
                    .addComponent(bExport)
                    .addComponent(bSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lMessage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        contPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        contPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(contPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addComponent(contPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        refTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Entrytype", "Author/Editor", "Title", "Year", "Journal/Booktitle", "Bibtexkey"
            }
        ));
        refTableScrollPane.setViewportView(refTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refTableScrollPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTypeActionPerformed
        //System.out.println(cbType.getSelectedIndex());
        if (cbType.getSelectedItem().equals("Article")) selectedType = 0;
        if (cbType.getSelectedItem().equals("Book")) selectedType = 1;
        if (cbType.getSelectedItem().equals("InProceedings")) selectedType = 2;
    }//GEN-LAST:event_cbTypeActionPerformed

    private void bNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewActionPerformed
        // tarkista cbType
        if (cbType.getSelectedItem().equals("Article")) {
            articlePanel.clearTextFields();
            cl.show(contPanel, "article");
            selectedType = 0;
        } else if (cbType.getSelectedItem().equals("Book")) {
            bookPanel.clearTextFields();
            cl.show(contPanel, "book");
            selectedType = 1;
        } else if (cbType.getSelectedItem().equals("InProceedings")) {
            inproceedingsPanel.clearTextFields();
            cl.show(contPanel, "inproceedings");
            selectedType = 2;
        }
    }//GEN-LAST:event_bNewActionPerformed

    private void bAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddActionPerformed
        if (selectedType == 0) {

                model.addRow(new Object[] {
                    "Article",
                    articlePanel.getTfAuthor().getText(),
                    articlePanel.getTfTitle().getText(),
                    articlePanel.getTfYear().getText(),
                    "",
                    articlePanel.getTfBibtexkey().getText(),
                });
            } else if (selectedType == 1) {

                // entrytype, author/editor, title, year, journal/booktitle, bibtexkey
                model.addRow(new Object[] {
                    "Book",
                    bookPanel.getTfAuthor().getText(),
                    bookPanel.getTfTitle().getText(),
                    bookPanel.getTfYear().getText(),
                    "",
                    bookPanel.getTfBibtexkey().getText(),
                });
            } else if (selectedType == 2) {

                // entrytype, author/editor, title, year, journal/booktitle, bibtexkey
                model.addRow(new Object[] {
                    "Inproceedings",
                    inproceedingsPanel.getTfAuthor().getText(),
                    inproceedingsPanel.getTfTitle().getText(),
                    inproceedingsPanel.getTfYear().getText(),
                    "",
                    inproceedingsPanel.getTfBibtexkey().getText(),
                });
            } else {
                // ei tunnistettu luokka
            } 
    }//GEN-LAST:event_bAddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAdd;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bExport;
    private javax.swing.JButton bNew;
    private javax.swing.JButton bSave;
    private javax.swing.JComboBox<String> cbType;
    private javax.swing.JPanel contPanel;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JLabel lMessage;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable refTable;
    private javax.swing.JScrollPane refTableScrollPane;
    // End of variables declaration//GEN-END:variables
}
